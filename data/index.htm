<!--
NFC Portal controller

XXX Requires license etc.
-->
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>NFC Portal Control</title>
  <script type="text/javascript" src="static/head.js"></script>
  <script type="text/javascript">

    // Shims
    // First, checks if it isn't implemented yet.
    if (!String.prototype.format) {
      String.prototype.format = function() {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function(match, number) {
          return typeof args[number] != 'undefined'
            ? args[number]
            : match
          ;
        });
      };
    }

    // Methods for updating the displayed UI.
    var UI = (function() {
      this.dragInProcess = false;
      this.showMode = function(newMode) {
        $('.modeIcon').removeClass('active').addClass('inactive');
        $('.modeIcon#modeicon' + newMode).removeClass('inactive').addClass('active');
        $('#modeData').html(Portal.mode);
      };

      this.showVersion = function(version) {
        $('#versionData').html(version);
      };

      this.showBankCount = function(numbanks) {
        $('#bankData').html(numbanks);
      };

      this.showSlotContents = function(slotarray) {
        // We expect an array of ints indicating bank IDs.
        // 0 indicates empty.
        // We build up an array of <div.slotContent> objects, then
        // stick them into <div.slotContents>, replacing existing content.
        var contents = "";
        var slotNum = 1;
        var extraClass = '';
        var extraDivOpen = '';
        var extraDivClose = '';
        // Group LEGO and Disney in columns of 3
        if (Portal.mode != Portal.MODE_SKYLANDERS) {
          extraClass = ' slotVertical';
          extraDivOpen = "<div class='slotDividerWrapper' id='{0}'>";
          extraDivClose = "</div>";
        }
        slotarray.forEach(function(item) {
          var populatedClass = ' emptySlot';
          if (slotNum % 3 == 1) {
            var slotName;
            if (slotNum < 3) {
              slotName = 'C';
            } else if (slotNum < 6) {
              slotName = 'L';
            }  else {
              slotName = 'R';
            }
            contents += extraDivOpen.format(slotName);
          }
          var displayText = "<span class='emptySlotInner" + extraClass +"'>+</span>";
          if (item != 0) {
            populatedClass = ' fullSlot';
            if (item in this.bankNames) {
              var bankName = bankNames[item];
              // Just show final part of name
              var parts = bankName.split('~');
              displayText = parts.pop();
              // displayText = bankName.replace(/\~/g, '<br/>');
              var bankInfo = this.bankInfo[bankName];
              if (bankInfo[1]) {
                // We have LEM data available.  For now, just display under the text.
                displayText = displayText + "<br/>" + bankInfo[1].replace(/\~/g, ' ');
              }
              var imgSrc;
              if (bankInfo[2]) {
                // We have an image available.
                imgSrc = '/images/' + Portal.IMG_DIR[Portal.mode] + '/' + bankInfo[0] + '.jpg';
              } else {
                imgSrc = '/images/default.png';
              }
              displayText = "<img src='" + imgSrc + "'>" + displayText;
            } else {
              displayText = 'Bank ' + item;
            }
          }
          var div = "<div class='slotContent" + populatedClass + extraClass +"' id='slot" + slotNum + "' data-slotnum='" + slotNum + "'>" + displayText + "</div>";
          contents += div;
          slotNum ++;
          if (slotNum % 3 == 1) {
            contents += extraDivClose;
          }
        });
        $('#slotContents').html(contents);
        $('.slotContent').click(function(event) {
          if (UI.dragInProcess) { return; };
          var target = event.target;
          var slotnum = null;
          do {
            slotnum = target.getAttribute('data-slotnum');
            console.log(slotnum);
            target = target.parentNode;
          } while ((slotnum === null) &&
                   (typeof target !== 'undefined'));
          openChooser(slotnum);
        });
        $('.slotContent.fullSlot').draggable({
          revert: true,
          revertDuration: 100,
          snap: ".slotContent.emptySlot",
          snapMode: "inner",
          start: function() { UI.dragInProcess = true; },
          stop: function() { UI.dragInProcess = false; }
        });

        // Use start/stop events on the dragger to
        // avoid doing the click event during.

        $('.slotContent.emptySlot').droppable({
          accept: ".slotContent",
          classes: {
            "ui-droppable-active": "ui-state-default",
            "ui-droppable-hover": "ui-state-hover"
          },
          drop: function( event, ui ) {
            var targetSlotNum = $(this).attr('data-slotnum');
            var srcSlotNum = ui.draggable.attr('data-slotnum');
            console.log("dropped from " + srcSlotNum + " to " + targetSlotNum);
            // Act on the dropped item.  Assume that the portal
            // will clear the old slot.
            var srcBankNum = Portal.slotContents[srcSlotNum - 1];
            console.log("Bank ID:" + srcBankNum);
            Portal.setSlot(targetSlotNum, srcBankNum);
          }
        })
      };

      this.showBanksLoaded = function(numloaded) {
        $('#banksLoaded').html(numloaded);
      };

      this.showBankChooser = function() {
        $('#bankChooser').iziModal('open');
      };

      this.hideBankChooser = function() {
        $('#bankChooser').iziModal('close');
      };

      this.setPortalUnreachable = function() {
        // Looks like a bug in iziModal that 'open' will close an already-open modal.
        // So check state first.
        var modal = $('#portalUnreachable');
        var state = modal.iziModal('getState');
        // Expect 'open' or 'opening' if we've already called it to open.
        if (state.indexOf('open') != 0) {
          modal.iziModal('open');
        }
        // We want to poll in the background to see whether it comes back.
        window.setTimeout(Portal.pollState, 1000);
      };

      this.setPortalReachable = function() {
        $('#portalUnreachable').iziModal('close');
      };

      this.showCurrentChooserSlot = function(slotnum) {
        $('#slotNum').html(slotnum);
      };

      return this;
    }());

    var Portal = (function() {
      // Constants ----------------
      this.MODE_UNKNOWN = 0;
      this.MODE_DISNEY = 1;
      this.MODE_LEGO = 2;
      this.MODE_SKYLANDERS = 3;
      this.IMG_DIR = {};
      this.IMG_DIR[this.MODE_LEGO] = "lego";
      this.IMG_DIR[this.MODE_DISNEY] = "disney";
      this.IMG_DIR[this.MODE_SKYLANDERS] = "skylanders";

      this.pollInterval = 3000;

      // Private state --------------------
      var numslots = 0;
      var numbanks = 0;
      var version = "Unknown";
      var mode = this.MODE_UNKNOWN;
      var pollHandle = 0;
      var bankNameHandle = 0;

      // Public state
      this.bankNames = [];
      this.slotContents = [];
      this.startedBankNames = false;
      this.stopBankNames = false;
      // Stores tree of bank names, so that related
      // entries can be grouped together, e.g.
      // {
      //   "Trap Team": {
      //     "Traps": {
      //       "Fire": 1,  // Trap Team/Traps/Fire = bank 1
      //     },
      //     "Characters": {
      //       "Kaos": 2
      //     }
      //   }
      // }
      this.bankNameTree = {};
      // Map from bank name to [UID, LEM, gotimg]
      this.bankInfo = {};

      // Methods ------------------
      // Sometimes we get presented with a JSON string literal rather
      // than JSON object.  Force to object.
      this.forceJSON = function(jsonData) {
          console.log(jsonData);
          console.log(typeof jsonData);
          if (typeof jsonData !== 'object') {
            jsonData = JSON.parse(jsonData);
          }
          return jsonData;
      }

      // Respond to JSON object describing current state.
      this.updateState = function(jsonData) {
        jsonData = this.forceJSON(jsonData);
        if ('version' in jsonData) {
          Portal.version = jsonData['version'];
          UI.showVersion(Portal.version);
          var newMode = Portal.MODE_UNKNOWN;
          if (Portal.version.indexOf("Skylanders") != -1) {
            newMode = Portal.MODE_SKYLANDERS;
          } else if (Portal.version.indexOf("LEGO") != -1) {
            newMode = Portal.MODE_LEGO;
          } else if (Portal.version.indexOf("Disney") != -1) {
            newMode = Portal.MODE_DISNEY;
          } else {
            newMode = Portal.MODE_UNKNOWN;
          }
          console.log("Curr mode:" + newMode);
          if (newMode != Portal.mode) {
            console.log("Differs from old mode");
            Portal.mode = newMode;
            UI.showMode(newMode);
          }
        }
        if ('numbanks' in jsonData) {
          Portal.numbanks = jsonData['numbanks'];
          UI.showBankCount(Portal.numbanks);
        }
        if ('numslots' in jsonData) {
          Portal.numslots = jsonData['numslots'];
          // No immediate external display of slot count.
        }
        if ('slotcontents' in jsonData) {
          Portal.slotContents = jsonData['slotcontents'];
          UI.showSlotContents(jsonData['slotcontents']);
        }
      };

      this.pollSlots = function() {
        App.sendRequest('queryslots', this.processSlotData);
      };

      this.updateNameTree = function(name, banknum) {
        // Builds updates to the bank name tree -
        // see bankNameTree for details of structure.

        // Tokenise name on '~'
        var tokens = name.split('~');
        var leaftoken = tokens.pop();
        var tree = this.bankNameTree;
        tokens.forEach(function(token) {
          if (!(token in tree)) {
            // Not already in the tree - create a node.
            tree[token] = {};
          }
          tree = tree[token];
        });

        // Now we're ready to add the leaf, which is just
        // the bank number.
        tree[leaftoken] = banknum;
      };

      this.processSingleBankInfo = function(banknum, item) {
        item = forceJSON(item);
        this.bankNames[banknum] = item[0];
        this.updateNameTree(item[0], banknum);
        this.bankInfo[item[0]] = [ item[1], item[2], item[3] ];
      };

      this.getBankNames = function(startbank, count, getMore) {
        if (typeof getMore === 'undefined') getMore = false;

        App.sendRequest('bankinfo?startbank=' + startbank + '&count=' + count + "&imgdir=" + Portal.IMG_DIR[Portal.mode], function(jsonData) {
          jsonData = forceJSON(jsonData);
          var baseCacheKey = "mode" + Portal.mode + "_bankinfo";
          jsonData.forEach(function(item) {
            // Response is a JSON array : name, UID, gotimg
            this.processSingleBankInfo(startbank, item);
            window.localStorage.setItem(baseCacheKey+startbank, JSON.stringify(item));
            startbank ++;
          });
          UI.showBanksLoaded(startbank - 1);
          if (getMore && !Portal.stopBankNames && (startbank < this.numbanks)) {
            bankNameHandle = window.setTimeout(function() { this.getBankNames(startbank, count, true); }, 10 );
          }
        });
      };

      // Check localStorage for cached bank names.  If found,
      // fill in the bankNames variables as if they'd just been
      // read from the portal, and return true.
      this.readCachedBankNames = function() {
        var gotCache = false;
        var baseCacheKey = "mode" + Portal.mode + "_bankinfo";
        console.log("baseCacheKey=" + baseCacheKey);
        if (window.localStorage.getItem(baseCacheKey+"1")) {
          // We have some stored data.  Read it.
          console.log("Found cached data");
          gotCache = true;
          this.bankNames = [];
          this.stopBankNames = false;
          this.bankNameTree = {};
          this.bankInfo = {};
          this.startedBankNames = true;

          var ii = 1;
          var readInfo;
          do {
            readInfo = window.localStorage.getItem(baseCacheKey+ii);
            if (readInfo) {
              this.processSingleBankInfo(ii, readInfo);
              ii++;
            }
          } while (readInfo);
          UI.showBanksLoaded(ii - 1);
        }
        return gotCache;
      };

      this.startFetchingBankNames = function() {
        this.bankNames = [];
        this.stopBankNames = false;
        this.bankNameTree = {};
        this.bankInfo = {};
        this.startedBankNames = true;
        this.getBankNames(1, 10, true);
      };

      this.populateBankNames = function() {
        if (!Portal.readCachedBankNames()) {
          Portal.startFetchingBankNames();
        }
      };

      this.stopPolling = function() {
        window.clearTimeout(pollHandle);
      };

      this.refreshResponse = function(jsonData) {
        this.updateState(jsonData);
      };

      // Poll response is like a refresh response, but with
      // scheduling of another poll in the future.
      this.pollResponse = function(jsonData) {
        var pollDelay = this.pollInterval;
        // Dragging and polling don't play well together due to
        // the DOM updates after poll response.  If we're
        // currently dragging, then ignore this poll data.  Poll
        // again sooner than we would normally do, though.
        if (UI.dragInProcess) {
          pollDelay = 100;
        } else {
          this.refreshResponse(jsonData);
          if (!(Portal.startedBankNames)) {
            Portal.populateBankNames();
          }
        }
        pollHandle = window.setTimeout(this.pollState, pollDelay);
      };

      this.pollState = function() {
        // Dragging and polling don't play well together due to
        // the DOM updates after poll response.  Delay the poll
        // if we're currently dragging.
        if (UI.dragInProcess) {
          window.setTimeout(this.pollState, 100);
          return;
        }
        App.sendRequest('querystate', this.pollResponse, true);
      };

      this.refreshSlots = function() {
        App.sendRequest('querystate', this.refreshResponse, true);
      };

      this.setPortalMode = function(mode) {
        App.sendRequest('setportalmode?mode=' + mode);
        // Interrupt any in-progress name fetch
        this.stopBankNames = true;
        this.mode = mode;
        UI.showMode(mode);
        // Start fetching the names again
        window.setTimeout(this.populateBankNames, 2000);
      };

      this.setSlot = function(slot, bank) {
        App.sendRequest('selectbank?banknum=' + bank + '&targetslot=' + slot, this.refreshSlots);
      };

      this.clearSlot = function(slot) {
        App.sendRequest('clearslot?targetslot=' + slot, this.refreshSlots);
      };

      return this;
    }());

    var App = (function() {
      // Public state
      this.chooserBreadcrumbs = null;
      this.chooserSlot = 1;

      // XXX Consider replacing with jQuery simplified version.
      this.sendRequest = function(url, oncomplete, setCacheBreaker){
        var xh = new XMLHttpRequest();
        if (setCacheBreaker) {
          // Note : assumes we have no URL parameters, will need adapting if we
          // need a usecase with existing parameters.
          url += "?cb=" + Date.now();
        }
        console.log("send URL " + url);
        xh.onreadystatechange = function(){
          if (xh.readyState == 4){
            if(xh.status != 200) {
              // Ignore status = 0 - that will be handled in a moment by onerror
              if (xh.status != 0) {
                alert("ERROR:" + xh.status + " - " + xh.response);
                console.log(xh);
              }
            } else if (oncomplete) {
              UI.setPortalReachable();
              oncomplete(xh.response);
            }
          }
        };
        xh.onerror = function(e) {
          console.log("ERRORmethod: phase: " + e.eventPhase);
          if (e.eventPhase == 2) {
            // This appears to be the characteristic of an unreachable
            // end-point.
            UI.setPortalUnreachable();
          }
          console.log(e);
        };
        xh.open("GET", url, true);
        xh.send(null);
      };

      this.sendLiteral = function() {
        var val = $('#literalCmd').val();
        this.sendRequest('literal?cmd=' + val, alert);
      };

      this.populateOptions = function(tree) {
        // Populate options in the bank chooser dialog

        // First populate the current breadcrumbs.
        var htmlStr = "";
        var crumbLevel = 0;
        // Shift a top-level 'All' node in.
        var crumbList = this.chooserBreadcrumbs.slice(0);
        crumbList.unshift('All');
        crumbList.forEach(function(crumb) {
          htmlStr += "<ul><li class='crumb'><a href='#' data-crumb-level='" + crumbLevel + "'>" + crumb + "</a></li>";
          crumbLevel ++;
        });

        htmlStr += "<ul>";

        // Next populate the choices at the current level
        for (key in tree) {
          var val = tree[key];

          var displayText;
          // XXX Prob need to HTML-escape the key here.
          if (typeof val === 'object') {
            displayText = key + " &gt;";
          } else {
            displayText = key;
          }

          htmlStr += "<li class='option'><a href='#' data-option-val='" + key + "'>" + displayText + "</a></li>";
        }

        // Close all the UL tags
        while (crumbLevel  > 0) {
          htmlStr += "</ul>";
          crumbLevel --;
        }

        $('#bankChooser #options').html(htmlStr);
        $('#bankChooser #options li.option a').click(this.optionSelected);
        $('#bankChooser #options li.crumb a').click(this.crumbSelected);
      };

      this.getCurrentTree = function() {
        var tree = Portal.bankNameTree;
        App.chooserBreadcrumbs.forEach(function(crumb) {
          tree = tree[crumb];
        });
        return tree;
      };

      this.crumbSelected = function(event) {
        var crumbLevel = event.target.getAttribute('data-crumb-level');

        // We want to roll-back the breadcrumbs to this level.
        while (App.chooserBreadcrumbs.length > crumbLevel) {
          App.chooserBreadcrumbs.pop();
        }

        // Now get the refreshed tree and repopulate the dialog.
        var tree = App.getCurrentTree();
        App.populateOptions(tree);
      };

      this.optionSelected = function(event) {
        var optionText = event.target.getAttribute('data-option-val');
        // Get current tree level
        var tree = App.getCurrentTree();
        tree = tree[optionText];

        if (typeof tree === 'object') {
          // They selected a sub-tree.  Repopulate the dialog.
          App.chooserBreadcrumbs.push(optionText);
          App.populateOptions(tree);
        } else {
          // They've selected a leaf in the tree - which has
          // resolved to a bank number.  Put it in the slot.
          Portal.setSlot(App.chooserSlot, tree);
          UI.hideBankChooser();
        }
      };

      this.openChooser = function(slotnum) {
        UI.showCurrentChooserSlot(slotnum);

        // Populate the list of options.  If we've not opened this
        // dialog before then we start with the top-level items
        // in bankNameTree.
        if (this.chooserBreadcrumbs === null) {
          this.chooserBreadcrumbs = [];
        }
        populateOptions(this.getCurrentTree());
        this.chooserSlot = slotnum;

        UI.showBankChooser();
      };

      this.clearCurrentSlot = function() {
        Portal.clearSlot(this.chooserSlot);
        UI.hideBankChooser();
      };

      return this;
    }());

    $(document).ready(function() {
      // Update state immediately, then background poll regularly.
      // Once first poll is successful, we'll start querying for bank info.
      Portal.pollState();

      // Prepare modal dialog.
      $('.modalContent').iziModal();
    });

  </script>
  <link rel="stylesheet" href="static/combined.css">
  <!-- inline styles because ESP web server doesn't like lots of simultaneous requests -->
  <style>
.portal-data { font-weight: bold; }
.slotContent {
  display: inline-block;
  margin: 5px;
  width: 150px;
  text-align: center;
  border: 1px solid #AAA;
  height: 200px;
  vertical-align: bottom;
  line-height: 1.3em;
}
.slotContent img {
  width: 100%;
}
.slotVertical {
  display: block !important;
  margin: 0 auto 10px auto;
}
.slotDividerWrapper {
  display: inline-block;
  margin: 0px;
  padding: 0px;
  width: 33%;
}
.slotDividerWrapper#L {
  float: left;
}
.slotDividerWrapper#R {
  float: right;
}
span.emptySlotInner {
  font-size: 150px;
  line-height: 1.2em;
  color: lightgray;
}
.clear {
  clear: both;
}
#bankChooser #options li {
  list-style: none;
  padding-bottom: 5px;
}
.modesWrapper {
  display: block;
  width: 100%;
}
.modeIcon {
  display: inline-block;
  width: 30%;
  margin: 1%;
  cursor: pointer;
}
.inactive {
  filter: grayscale(100%);
  opacity: 0.2;
}
.active {
}
  </style>
</head>
<body id="index" style="margin:5px; padding:0; font-family:sans-serif;">

<p>Portal status:
<div class='modesWrapper'>
  <img class='modeIcon inactive' id='modeicon1' onclick='javascript:Portal.setPortalMode(Portal.MODE_DISNEY);' src='images/logo_disney.png'>
  <img class='modeIcon inactive' id='modeicon2' onclick='javascript:Portal.setPortalMode(Portal.MODE_LEGO);' src='images/logo_lego.png'>
  <img class='modeIcon inactive' id='modeicon3' onclick='javascript:Portal.setPortalMode(Portal.MODE_SKYLANDERS);' src='images/logo_skylanders.png'>
</div>
<p>Version: <span id="versionData" class="portal-data">Unknown</span>
<p>Loaded <span id="banksLoaded" class="portal-data">0</span> / <span id="bankData" class="portal-data">Unknown</span> figure names. (<a href='#' onclick="javascript:Portal.startFetchingBankNames();">Force refresh</a>)
</p>

<hr>

<h1>Figures present:</h1>
<div id="slotContents">
<div class="slotContent" id="slot1">Unknown</div>
</div>

<p class='clear'>Tap/click on a slot to change its contents.
<hr>

<h1>Query state</h1>
<a href='#' id='globalStateBtn' onclick="javascript:App.sendRequest('querystate', Portal.updateState);">Global state</a>
<a href='#' onclick="javascript:App.sendRequest('banknames?startbank=1', alert);">Bank 1 name</a>
<a href='#' onclick="javascript:App.sendRequest('bankinfo?startbank=1&imgdir=skylanders', alert);">Bank 1 info</a>
<a href='#' onclick="javascript:Portal.stopPolling();">Stop polling</a>
<a href='#' onclick="javascript:Portal.pollState();">Resume polling</a>

<h1>Assign a bank</h1>
<a href='#' onclick="javascript:Portal.setSlot(1, 5);">Bank 5 into Slot 1</a>
<a href='#' onclick="javascript:Portal.clearSlot(1);">Clear Slot 1</a>

<h1>Literal Command</h1>
<p>AT+<input type="text" id="literalCmd"> <input type="button" value="Send" onclick="javascript:App.sendLiteral();">
<hr>

<!-- Hidden modal : structure to choose a bank for a slot -->
<div id="bankChooser" class="modalContent"
  data-iziModal-fullscreen="true"  data-iziModal-title="Change slot contents"
  data-iziModal-icon="icon-home" data-iziModal-transitionIn="comingIn"
  data-iziModal-radius=20
>
  <p>&nbsp;Choose a figure to place in slot <span id='slotNum'>1</span>
  <hr>
  <ul id="options">
    <li>A
    <li>B
  </ul>
  <hr>
  <p>&nbsp;Or <a href='#' id='clearTheSlot' onclick='javascript:App.clearCurrentSlot();'>Clear this slot</a>
</div>

<!-- Hidden modal : portal unreachable warning -->
<div id="portalUnreachable" class="modalContent"
  data-iziModal-closebutton="false"  data-iziModal-title="Portal Unreachable"
  data-iziModal-icon="icon-home" data-iziModal-transitionIn="comingIn"
  data-iziModal-radius=20
>
  <p>&nbsp;The portal appears to be offline.  Is it plugged into the console?
</div>

<script src="static/tail.js?cb=1234" type="text/javascript"></script>
</body>
</html>